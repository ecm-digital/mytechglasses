'use client'

import { useEffect, useState, Suspense } from 'react'
import { useSearchParams } from 'next/navigation'
import Link from 'next/link'
import { 
  ExclamationTriangleIcon, 
  ArrowPathIcon, 
  ShoppingCartIcon,
  CreditCardIcon,
  PhoneIcon,
  EnvelopeIcon
} from '@heroicons/react/24/outline'
import { useCart } from '@/hooks/useCart'
import { formatPrice } from '@/lib/cart'

// Types for different failure reasons
type FailureReason = 
  | 'card_declined' 
  | 'insufficient_funds' 
  | 'expired_card' 
  | 'incorrect_cvc' 
  | 'processing_error' 
  | 'authentication_required'
  | 'cancelled'
  | 'unknown'

interface FailureInfo {
  title: string
  description: string
  icon: string
  suggestions: string[]
  canRetry: boolean
}

const FAILURE_REASONS: Record<FailureReason, FailureInfo> = {
  card_declined: {
    title: 'Karta zosta≈Ça odrzucona',
    description: 'Twoja karta zosta≈Ça odrzucona przez bank. Mo≈ºe to byƒá spowodowane r√≥≈ºnymi przyczynami.',
    icon: 'üí≥',
    suggestions: [
      'Sprawd≈∫ czy masz wystarczajƒÖce ≈õrodki na koncie',
      'Upewnij siƒô, ≈ºe karta nie jest zablokowana',
      'Skontaktuj siƒô z bankiem w sprawie transakcji',
      'Spr√≥buj u≈ºyƒá innej karty p≈Çatniczej'
    ],
    canRetry: true
  },
  insufficient_funds: {
    title: 'NiewystarczajƒÖce ≈õrodki',
    description: 'Na Twoim koncie nie ma wystarczajƒÖcych ≈õrodk√≥w do realizacji p≈Çatno≈õci.',
    icon: 'üí∞',
    suggestions: [
      'Sprawd≈∫ saldo na koncie',
      'Do≈Çaduj konto lub u≈ºyj innej karty',
      'Sprawd≈∫ czy nie masz ustawionych limit√≥w dziennych',
      'Skontaktuj siƒô z bankiem'
    ],
    canRetry: true
  },
  expired_card: {
    title: 'Karta wygas≈Ça',
    description: 'Data wa≈ºno≈õci Twojej karty ju≈º minƒô≈Ça.',
    icon: 'üìÖ',
    suggestions: [
      'Sprawd≈∫ datƒô wa≈ºno≈õci karty',
      'U≈ºyj aktualnej karty p≈Çatniczej',
      'Skontaktuj siƒô z bankiem w sprawie nowej karty'
    ],
    canRetry: true
  },
  incorrect_cvc: {
    title: 'Nieprawid≈Çowy kod CVC',
    description: 'Wprowadzony kod CVC (CVV) jest nieprawid≈Çowy.',
    icon: 'üî¢',
    suggestions: [
      'Sprawd≈∫ 3-cyfrowy kod na odwrocie karty',
      'Upewnij siƒô, ≈ºe wprowadzasz w≈Ça≈õciwy kod',
      'Sprawd≈∫ czy karta nie jest uszkodzona'
    ],
    canRetry: true
  },
  processing_error: {
    title: 'B≈ÇƒÖd przetwarzania',
    description: 'WystƒÖpi≈Ç techniczny problem podczas przetwarzania p≈Çatno≈õci.',
    icon: '‚ö†Ô∏è',
    suggestions: [
      'Spr√≥buj ponownie za kilka minut',
      'Sprawd≈∫ po≈ÇƒÖczenie internetowe',
      'U≈ºyj innej przeglƒÖdarki lub urzƒÖdzenia',
      'Skontaktuj siƒô z naszym wsparciem'
    ],
    canRetry: true
  },
  authentication_required: {
    title: 'Wymagana autoryzacja',
    description: 'Tw√≥j bank wymaga dodatkowej autoryzacji tej transakcji.',
    icon: 'üîê',
    suggestions: [
      'Sprawd≈∫ SMS lub aplikacjƒô bankowƒÖ',
      'Potwierd≈∫ transakcjƒô w banku',
      'Upewnij siƒô, ≈ºe masz w≈ÇƒÖczone powiadomienia',
      'Skontaktuj siƒô z bankiem'
    ],
    canRetry: true
  },
  cancelled: {
    title: 'P≈Çatno≈õƒá anulowana',
    description: 'P≈Çatno≈õƒá zosta≈Ça anulowana przez u≈ºytkownika.',
    icon: '‚ùå',
    suggestions: [
      'Mo≈ºesz spr√≥bowaƒá ponownie',
      'Twoje dane w koszyku zosta≈Çy zachowane',
      'Wybierz innƒÖ metodƒô p≈Çatno≈õci'
    ],
    canRetry: true
  },
  unknown: {
    title: 'Nieznany b≈ÇƒÖd',
    description: 'WystƒÖpi≈Ç nieoczekiwany problem podczas p≈Çatno≈õci.',
    icon: '‚ùì',
    suggestions: [
      'Spr√≥buj ponownie za kilka minut',
      'Sprawd≈∫ po≈ÇƒÖczenie internetowe',
      'Skontaktuj siƒô z naszym wsparciem',
      'U≈ºyj innej metody p≈Çatno≈õci'
    ],
    canRetry: true
  }
}

function PaymentFailedContent() {
  const searchParams = useSearchParams()
  const reason = (searchParams.get('reason') as FailureReason) || 'unknown'
  const sessionId = searchParams.get('session_id')
  const amount = searchParams.get('amount')
  
  const { summary, isEmpty } = useCart()
  const [retryAttempts, setRetryAttempts] = useState(0)
  
  const failureInfo = FAILURE_REASONS[reason] || FAILURE_REASONS.unknown

  const handleRetryPayment = () => {
    setRetryAttempts(prev => prev + 1)
    // Redirect back to checkout
    window.location.href = '/checkout'
  }

  const getRetryButtonText = () => {
    if (retryAttempts === 0) return 'Spr√≥buj ponownie'
    if (retryAttempts === 1) return 'Spr√≥buj jeszcze raz'
    return `Spr√≥buj ponownie (${retryAttempts + 1})`
  }

  return (
    <div className="min-h-screen bg-gray-50 py-12">
      <div className="container max-w-2xl">
        {/* Failure Header */}
        <div className="text-center mb-8">
          <div className="text-6xl mb-4">{failureInfo.icon}</div>
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            {failureInfo.title}
          </h1>
          <p className="text-gray-600">
            {failureInfo.description}
          </p>
        </div>

        {/* Failure Details */}
        <div className="card p-6 mb-6">
          <h2 className="text-xl font-bold mb-4 flex items-center">
            <ExclamationTriangleIcon className="w-6 h-6 text-red-500 mr-2" />
            Co posz≈Ço nie tak?
          </h2>
          
          <div className="space-y-3 mb-6">
            {sessionId && (
              <div className="flex justify-between">
                <span className="text-gray-600">ID sesji:</span>
                <span className="font-mono text-sm">{sessionId}</span>
              </div>
            )}
            {amount && (
              <div className="flex justify-between">
                <span className="text-gray-600">Kwota:</span>
                <span className="font-bold">{formatPrice(parseFloat(amount))}</span>
              </div>
            )}
            {!isEmpty() && (
              <div className="flex justify-between">
                <span className="text-gray-600">Produkty w koszyku:</span>
                <span className="font-bold">{summary.itemCount}</span>
              </div>
            )}
            <div className="flex justify-between">
              <span className="text-gray-600">Czas:</span>
              <span>{new Date().toLocaleString('pl-PL')}</span>
            </div>
          </div>

          {/* Suggestions */}
          <div className="border-t pt-4">
            <h3 className="font-bold mb-3">üí° Co mo≈ºesz zrobiƒá:</h3>
            <ul className="space-y-2">
              {failureInfo.suggestions.map((suggestion, index) => (
                <li key={index} className="flex items-start">
                  <span className="text-blue-500 mr-2 mt-1">‚Ä¢</span>
                  <span className="text-gray-700">{suggestion}</span>
                </li>
              ))}
            </ul>
          </div>
        </div>

        {/* Action Buttons */}
        <div className="space-y-4 mb-8">
          {failureInfo.canRetry && !isEmpty() && (
            <button
              onClick={handleRetryPayment}
              className="btn btn-primary w-full flex items-center justify-center text-lg py-4"
            >
              <ArrowPathIcon className="w-6 h-6 mr-2" />
              {getRetryButtonText()}
            </button>
          )}
          
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <Link 
              href="/cart" 
              className="btn btn-secondary flex items-center justify-center"
            >
              <ShoppingCartIcon className="w-5 h-5 mr-2" />
              Powr√≥t do koszyka
            </Link>
            <Link 
              href="/products" 
              className="btn btn-outline flex items-center justify-center"
            >
              Kontynuuj zakupy
            </Link>
          </div>
        </div>

        {/* Alternative Payment Methods */}
        <div className="card p-6 mb-6 bg-blue-50">
          <h3 className="font-bold mb-4 flex items-center">
            <CreditCardIcon className="w-6 h-6 text-blue-600 mr-2" />
            Alternatywne metody p≈Çatno≈õci
          </h3>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="text-center p-3 bg-white rounded-lg">
              <div className="text-2xl mb-1">üí≥</div>
              <div className="text-sm font-medium">Inna karta</div>
            </div>
            <div className="text-center p-3 bg-white rounded-lg">
              <div className="text-2xl mb-1">üì±</div>
              <div className="text-sm font-medium">BLIK</div>
            </div>
            <div className="text-center p-3 bg-white rounded-lg">
              <div className="text-2xl mb-1">üè¶</div>
              <div className="text-sm font-medium">Przelewy24</div>
            </div>
            <div className="text-center p-3 bg-white rounded-lg">
              <div className="text-2xl mb-1">üìû</div>
              <div className="text-sm font-medium">Telefon</div>
            </div>
          </div>
          <p className="text-sm text-blue-700 mt-4 text-center">
            Wszystkie metody p≈Çatno≈õci sƒÖ dostƒôpne podczas ponownej pr√≥by
          </p>
        </div>

        {/* Cart Preservation Notice */}
        {!isEmpty() && (
          <div className="card p-4 mb-6 bg-green-50 border-green-200">
            <div className="flex items-center text-green-800">
              <ShoppingCartIcon className="w-5 h-5 mr-2" />
              <span className="font-medium">Tw√≥j koszyk zosta≈Ç zachowany</span>
            </div>
            <p className="text-green-700 text-sm mt-1">
              Wszystkie produkty pozostajƒÖ w koszyku. Mo≈ºesz kontynuowaƒá zakupy lub spr√≥bowaƒá p≈Çatno≈õci ponownie.
            </p>
          </div>
        )}

        {/* Support Information */}
        <div className="card p-6 bg-gray-50">
          <h3 className="font-bold mb-4">üÜò Potrzebujesz pomocy?</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="flex items-center">
              <EnvelopeIcon className="w-5 h-5 text-gray-600 mr-3" />
              <div>
                <div className="font-medium">Email</div>
                <a href="mailto:support@mytechglasses.pl" className="text-blue-600 hover:underline text-sm">
                  support@mytechglasses.pl
                </a>
              </div>
            </div>
            <div className="flex items-center">
              <PhoneIcon className="w-5 h-5 text-gray-600 mr-3" />
              <div>
                <div className="font-medium">Telefon</div>
                <a href="tel:+48123456789" className="text-blue-600 hover:underline text-sm">
                  +48 123 456 789
                </a>
              </div>
            </div>
          </div>
          <div className="mt-4 p-3 bg-white rounded border-l-4 border-blue-500">
            <p className="text-sm text-gray-700">
              <strong>Wskaz√≥wka:</strong> Przy kontakcie podaj ID sesji: 
              <code className="ml-1 text-xs bg-gray-100 px-1 rounded">
                {sessionId || 'brak'}
              </code>
            </p>
          </div>
        </div>

        {/* Retry Attempts Warning */}
        {retryAttempts >= 2 && (
          <div className="mt-6 card p-4 bg-yellow-50 border-yellow-200">
            <div className="flex items-center text-yellow-800">
              <ExclamationTriangleIcon className="w-5 h-5 mr-2" />
              <span className="font-medium">Wiele nieudanych pr√≥b</span>
            </div>
            <p className="text-yellow-700 text-sm mt-1">
              Je≈õli problem siƒô powtarza, skontaktuj siƒô z naszym wsparciem lub spr√≥buj u≈ºyƒá innej metody p≈Çatno≈õci.
            </p>
          </div>
        )}
      </div>
    </div>
  )
}

export default function PaymentFailed() {
  return (
    <Suspense fallback={
      <div className="min-h-screen bg-gradient-to-br from-red-50 to-orange-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-red-600 mx-auto mb-4"></div>
          <p className="text-gray-600">≈Åadowanie...</p>
        </div>
      </div>
    }>
      <PaymentFailedContent />
    </Suspense>
  )
}