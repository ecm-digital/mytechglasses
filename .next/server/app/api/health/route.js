"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/health/route";
exports.ids = ["app/api/health/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("child_process");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fhealth%2Froute&page=%2Fapi%2Fhealth%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fhealth%2Froute.ts&appDir=%2FUsers%2Ftomaszgt%2FMytechglasses%2Fmy-tech-glasses%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Ftomaszgt%2FMytechglasses%2Fmy-tech-glasses&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fhealth%2Froute&page=%2Fapi%2Fhealth%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fhealth%2Froute.ts&appDir=%2FUsers%2Ftomaszgt%2FMytechglasses%2Fmy-tech-glasses%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Ftomaszgt%2FMytechglasses%2Fmy-tech-glasses&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_tomaszgt_Mytechglasses_my_tech_glasses_src_app_api_health_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/health/route.ts */ \"(rsc)/./src/app/api/health/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/health/route\",\n        pathname: \"/api/health\",\n        filename: \"route\",\n        bundlePath: \"app/api/health/route\"\n    },\n    resolvedPagePath: \"/Users/tomaszgt/Mytechglasses/my-tech-glasses/src/app/api/health/route.ts\",\n    nextConfigOutput,\n    userland: _Users_tomaszgt_Mytechglasses_my_tech_glasses_src_app_api_health_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/health/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZoZWFsdGglMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmhlYWx0aCUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmhlYWx0aCUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRnRvbWFzemd0JTJGTXl0ZWNoZ2xhc3NlcyUyRm15LXRlY2gtZ2xhc3NlcyUyRnNyYyUyRmFwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9JTJGVXNlcnMlMkZ0b21hc3pndCUyRk15dGVjaGdsYXNzZXMlMkZteS10ZWNoLWdsYXNzZXMmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ3lCO0FBQ3RHO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdGVjaC1nbGFzc2VzLz82M2Y1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi9Vc2Vycy90b21hc3pndC9NeXRlY2hnbGFzc2VzL215LXRlY2gtZ2xhc3Nlcy9zcmMvYXBwL2FwaS9oZWFsdGgvcm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2hlYWx0aC9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2hlYWx0aFwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvaGVhbHRoL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiL1VzZXJzL3RvbWFzemd0L015dGVjaGdsYXNzZXMvbXktdGVjaC1nbGFzc2VzL3NyYy9hcHAvYXBpL2hlYWx0aC9yb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvaGVhbHRoL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fhealth%2Froute&page=%2Fapi%2Fhealth%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fhealth%2Froute.ts&appDir=%2FUsers%2Ftomaszgt%2FMytechglasses%2Fmy-tech-glasses%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Ftomaszgt%2FMytechglasses%2Fmy-tech-glasses&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/health/route.ts":
/*!*************************************!*\
  !*** ./src/app/api/health/route.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_stripe__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/stripe */ \"(rsc)/./src/lib/stripe.ts\");\n/* harmony import */ var _lib_environment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/environment */ \"(rsc)/./src/lib/environment.ts\");\n/* harmony import */ var _lib_monitoring__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/monitoring */ \"(rsc)/./src/lib/monitoring.ts\");\n\n\n\n\nasync function GET() {\n    const startTime = performance.now();\n    try {\n        const config = (0,_lib_environment__WEBPACK_IMPORTED_MODULE_2__.getConfig)();\n        // Check environment configuration\n        const envValidation = (0,_lib_environment__WEBPACK_IMPORTED_MODULE_2__.validateEnvironmentConfig)();\n        // Test Stripe connection\n        let stripeStatus = \"healthy\";\n        let stripeError = null;\n        let stripeResponseTime = 0;\n        try {\n            const stripeStart = performance.now();\n            const stripe = (0,_lib_stripe__WEBPACK_IMPORTED_MODULE_1__.getStripeServer)();\n            // Simple test - retrieve account info with timeout\n            const timeoutPromise = new Promise((_, reject)=>setTimeout(()=>reject(new Error(\"Stripe connection timeout\")), 5000));\n            await Promise.race([\n                stripe.accounts.retrieve(),\n                timeoutPromise\n            ]);\n            stripeResponseTime = performance.now() - stripeStart;\n            // Mark as degraded if response time is high\n            if (stripeResponseTime > 3000) {\n                stripeStatus = \"degraded\";\n            }\n        } catch (error) {\n            stripeStatus = \"unhealthy\";\n            stripeError = error instanceof Error ? error.message : \"Unknown Stripe error\";\n            stripeResponseTime = performance.now() - startTime;\n        }\n        // Test database/storage connectivity (if applicable)\n        let storageStatus = \"healthy\";\n        let storageError = null;\n        try {\n            // Test localStorage availability\n            if (typeof localStorage !== \"undefined\") {\n                localStorage.setItem(\"health-check\", \"test\");\n                localStorage.removeItem(\"health-check\");\n            }\n        } catch (error) {\n            storageStatus = \"unhealthy\";\n            storageError = \"localStorage not available\";\n        }\n        // Calculate overall response time\n        const totalResponseTime = performance.now() - startTime;\n        // Record health checks\n        (0,_lib_monitoring__WEBPACK_IMPORTED_MODULE_3__.recordHealth)({\n            service: \"stripe\",\n            status: stripeStatus,\n            responseTime: stripeResponseTime,\n            error: stripeError\n        });\n        (0,_lib_monitoring__WEBPACK_IMPORTED_MODULE_3__.recordHealth)({\n            service: \"storage\",\n            status: storageStatus,\n            error: storageError\n        });\n        (0,_lib_monitoring__WEBPACK_IMPORTED_MODULE_3__.recordHealth)({\n            service: \"api\",\n            status: \"healthy\",\n            responseTime: totalResponseTime\n        });\n        // Get system health summary\n        const systemHealth = _lib_monitoring__WEBPACK_IMPORTED_MODULE_3__.healthMonitor.getSystemHealth();\n        const healthData = {\n            status: systemHealth.status,\n            timestamp: new Date().toISOString(),\n            environment: {\n                mode: config.environment,\n                stripeMode: config.stripeMode,\n                version: process.env.npm_package_version || \"1.0.0\"\n            },\n            checks: {\n                environment: envValidation.isValid ? \"healthy\" : \"unhealthy\",\n                stripe: stripeStatus,\n                storage: storageStatus,\n                api: \"healthy\"\n            },\n            performance: {\n                responseTime: Math.round(totalResponseTime),\n                stripeResponseTime: Math.round(stripeResponseTime)\n            },\n            details: {\n                environment: envValidation.isValid ? null : envValidation.errors,\n                stripe: stripeError,\n                storage: storageError,\n                uptime: process.uptime ? Math.round(process.uptime()) : null\n            },\n            ...config.isDevelopment && {\n                debug: {\n                    nodeVersion: process.version,\n                    platform: process.platform,\n                    memory: process.memoryUsage ? process.memoryUsage() : null,\n                    systemHealth: systemHealth\n                }\n            }\n        };\n        // Return appropriate status code\n        const isHealthy = systemHealth.status === \"healthy\" && envValidation.isValid;\n        const isDegraded = systemHealth.status === \"degraded\";\n        let status = 200;\n        if (!isHealthy) {\n            status = isDegraded ? 200 : 503 // 200 for degraded, 503 for unhealthy\n            ;\n        }\n        const response = next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(healthData, {\n            status\n        });\n        // Add cache headers\n        response.headers.set(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n        response.headers.set(\"Pragma\", \"no-cache\");\n        response.headers.set(\"Expires\", \"0\");\n        // Add health check headers\n        response.headers.set(\"X-Health-Status\", systemHealth.status);\n        response.headers.set(\"X-Response-Time\", Math.round(totalResponseTime).toString());\n        return response;\n    } catch (error) {\n        const errorResponseTime = performance.now() - startTime;\n        // Record unhealthy API status\n        (0,_lib_monitoring__WEBPACK_IMPORTED_MODULE_3__.recordHealth)({\n            service: \"api\",\n            status: \"unhealthy\",\n            responseTime: errorResponseTime,\n            error: error instanceof Error ? error.message : \"Unknown error\"\n        });\n        const errorResponse = {\n            status: \"unhealthy\",\n            timestamp: new Date().toISOString(),\n            error: error instanceof Error ? error.message : \"Unknown error\",\n            performance: {\n                responseTime: Math.round(errorResponseTime)\n            }\n        };\n        const response = next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(errorResponse, {\n            status: 503\n        });\n        response.headers.set(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n        response.headers.set(\"X-Health-Status\", \"unhealthy\");\n        response.headers.set(\"X-Response-Time\", Math.round(errorResponseTime).toString());\n        return response;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/health/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/environment.ts":
/*!********************************!*\
  !*** ./src/lib/environment.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ENVIRONMENT_CONSTANTS: () => (/* binding */ ENVIRONMENT_CONSTANTS),\n/* harmony export */   getApiBaseUrl: () => (/* binding */ getApiBaseUrl),\n/* harmony export */   getBooleanEnvVar: () => (/* binding */ getBooleanEnvVar),\n/* harmony export */   getConfig: () => (/* binding */ getConfig),\n/* harmony export */   getCurrentEnvironment: () => (/* binding */ getCurrentEnvironment),\n/* harmony export */   getEnvVar: () => (/* binding */ getEnvVar),\n/* harmony export */   getEnvironmentConfig: () => (/* binding */ getEnvironmentConfig),\n/* harmony export */   getFrontendUrl: () => (/* binding */ getFrontendUrl),\n/* harmony export */   getNumericEnvVar: () => (/* binding */ getNumericEnvVar),\n/* harmony export */   getStripeMode: () => (/* binding */ getStripeMode),\n/* harmony export */   isDevelopment: () => (/* binding */ isDevelopment),\n/* harmony export */   isEnvironment: () => (/* binding */ isEnvironment),\n/* harmony export */   isFeatureEnabled: () => (/* binding */ isFeatureEnabled),\n/* harmony export */   isProduction: () => (/* binding */ isProduction),\n/* harmony export */   isTest: () => (/* binding */ isTest),\n/* harmony export */   logEnvironmentConfig: () => (/* binding */ logEnvironmentConfig),\n/* harmony export */   resetConfig: () => (/* binding */ resetConfig),\n/* harmony export */   validateEnvironmentConfig: () => (/* binding */ validateEnvironmentConfig)\n/* harmony export */ });\n/**\n * Environment detection and configuration utilities\n * Handles development vs production environment differences\n */ // ============================================================================\n// TYPES AND INTERFACES\n// ============================================================================\n// ============================================================================\n// ENVIRONMENT DETECTION\n// ============================================================================\n/**\n * Gets the current environment\n */ const getCurrentEnvironment = ()=>{\n    // Check NODE_ENV first\n    if (false) {}\n    if (false) {}\n    // Check for Vercel environment\n    if (process.env.VERCEL_ENV === \"production\") {\n        return \"production\";\n    }\n    // Check for other production indicators\n    if (process.env.RAILWAY_ENVIRONMENT === \"production\" || process.env.RENDER_SERVICE_TYPE || process.env.HEROKU_APP_NAME) {\n        return \"production\";\n    }\n    // Default to development\n    return \"development\";\n};\n/**\n * Determines Stripe mode based on environment and keys\n */ const getStripeMode = ()=>{\n    const environment = getCurrentEnvironment();\n    // Always use test mode in development and test environments\n    if (environment === \"development\" || environment === \"test\") {\n        return \"test\";\n    }\n    // In production, check if we have live keys\n    const publishableKey = \"pk_test_51R9pLT2KYi1EVCMzHc8vDqSNTMpgfL5kMzX4qP68gdQp53ioubKm4dquVENb7YByxZ06bxOJhjzdnVLD2vo5wBbh00O0ngluNA\";\n    const secretKey = process.env.STRIPE_SECRET_KEY;\n    if (publishableKey?.startsWith(\"pk_live_\") && secretKey?.startsWith(\"sk_live_\")) {\n        return \"live\";\n    }\n    // Default to test mode for safety\n    return \"test\";\n};\n/**\n * Gets the API base URL based on environment\n */ const getApiBaseUrl = ()=>{\n    const environment = getCurrentEnvironment();\n    // In production, use the actual domain\n    if (environment === \"production\") {\n        return process.env.NEXTAUTH_URL || process.env.VERCEL_URL || \"https://mytechglasses.com\";\n    }\n    // In development/test, use localhost\n    return process.env.NEXTAUTH_URL || \"http://localhost:3000\";\n};\n/**\n * Gets the frontend URL for redirects\n */ const getFrontendUrl = ()=>{\n    return getApiBaseUrl();\n};\n// ============================================================================\n// ENVIRONMENT CONFIGURATION\n// ============================================================================\n/**\n * Gets complete environment configuration\n */ const getEnvironmentConfig = ()=>{\n    const environment = getCurrentEnvironment();\n    const isDevelopment = environment === \"development\";\n    const isProduction = environment === \"production\";\n    const isTest = environment === \"test\";\n    return {\n        environment,\n        isDevelopment,\n        isProduction,\n        isTest,\n        stripeMode: getStripeMode(),\n        apiBaseUrl: getApiBaseUrl(),\n        frontendUrl: getFrontendUrl(),\n        enableDebugLogging: isDevelopment || isTest,\n        enableErrorReporting: isProduction,\n        enableAnalytics: isProduction,\n        enablePerformanceMonitoring: isProduction,\n        rateLimitEnabled: isProduction,\n        corsEnabled: true,\n        securityHeadersEnabled: isProduction\n    };\n};\n// ============================================================================\n// FEATURE FLAGS\n// ============================================================================\n/**\n * Checks if a feature is enabled based on environment\n */ const isFeatureEnabled = (feature)=>{\n    const config = getEnvironmentConfig();\n    switch(feature){\n        case \"debug-logging\":\n            return config.enableDebugLogging;\n        case \"error-reporting\":\n            return config.enableErrorReporting;\n        case \"analytics\":\n            return config.enableAnalytics;\n        case \"performance-monitoring\":\n            return config.enablePerformanceMonitoring;\n        case \"rate-limiting\":\n            return config.rateLimitEnabled;\n        case \"cors\":\n            return config.corsEnabled;\n        case \"security-headers\":\n            return config.securityHeadersEnabled;\n        case \"stripe-webhooks\":\n            return config.isProduction;\n        case \"email-notifications\":\n            return config.isProduction;\n        case \"sms-notifications\":\n            return config.isProduction;\n        default:\n            return false;\n    }\n};\n// ============================================================================\n// VALIDATION\n// ============================================================================\n/**\n * Validates environment configuration\n */ const validateEnvironmentConfig = ()=>{\n    const errors = [];\n    const config = getEnvironmentConfig();\n    // Check required environment variables\n    if (false) {}\n    if (!process.env.STRIPE_SECRET_KEY) {\n        errors.push(\"STRIPE_SECRET_KEY is required\");\n    }\n    if (!process.env.NEXTAUTH_SECRET) {\n        errors.push(\"NEXTAUTH_SECRET is required\");\n    }\n    // Validate Stripe key consistency\n    const publishableKey = \"pk_test_51R9pLT2KYi1EVCMzHc8vDqSNTMpgfL5kMzX4qP68gdQp53ioubKm4dquVENb7YByxZ06bxOJhjzdnVLD2vo5wBbh00O0ngluNA\";\n    const secretKey = process.env.STRIPE_SECRET_KEY;\n    if (publishableKey && secretKey) {\n        const pkMode = publishableKey.startsWith(\"pk_live_\") ? \"live\" : \"test\";\n        const skMode = secretKey.startsWith(\"sk_live_\") ? \"live\" : \"test\";\n        if (pkMode !== skMode) {\n            errors.push(\"Stripe publishable key and secret key must be from the same environment (both test or both live)\");\n        }\n        if (config.isProduction && pkMode === \"test\") {\n            errors.push(\"Production environment should use live Stripe keys\");\n        }\n    }\n    // Validate URLs\n    if (config.isProduction) {\n        if (!process.env.NEXTAUTH_URL || process.env.NEXTAUTH_URL.includes(\"localhost\")) {\n            errors.push(\"Production environment requires a proper NEXTAUTH_URL (not localhost)\");\n        }\n    }\n    return {\n        isValid: errors.length === 0,\n        errors\n    };\n};\n// ============================================================================\n// LOGGING AND MONITORING\n// ============================================================================\n/**\n * Logs environment configuration on startup\n */ const logEnvironmentConfig = ()=>{\n    const config = getEnvironmentConfig();\n    const validation = validateEnvironmentConfig();\n    console.log(\"\\uD83D\\uDD27 Environment Configuration:\");\n    console.log(`   Node Environment: ${config.environment}`);\n    console.log(`   Stripe Mode: ${config.stripeMode.toUpperCase()}`);\n    console.log(`   API Base URL: ${config.apiBaseUrl}`);\n    console.log(`   Frontend URL: ${config.frontendUrl}`);\n    if (config.isDevelopment) {\n        console.log(\"\\uD83E\\uDDEA Running in development mode\");\n        console.log(`   Debug Logging: ${config.enableDebugLogging ? \"enabled\" : \"disabled\"}`);\n    }\n    if (config.isProduction) {\n        console.log(\"\\uD83D\\uDE80 Running in production mode\");\n        console.log(`   Error Reporting: ${config.enableErrorReporting ? \"enabled\" : \"disabled\"}`);\n        console.log(`   Analytics: ${config.enableAnalytics ? \"enabled\" : \"disabled\"}`);\n        console.log(`   Rate Limiting: ${config.rateLimitEnabled ? \"enabled\" : \"disabled\"}`);\n        console.log(`   Security Headers: ${config.securityHeadersEnabled ? \"enabled\" : \"disabled\"}`);\n    }\n    if (config.stripeMode === \"test\") {\n        console.log(\"\\uD83E\\uDDEA Running in Stripe TEST mode\");\n    } else {\n        console.log(\"\\uD83D\\uDCB3 Running in Stripe LIVE mode\");\n    }\n    if (!validation.isValid) {\n        console.error(\"❌ Environment configuration errors:\");\n        validation.errors.forEach((error)=>console.error(`   - ${error}`));\n    } else {\n        console.log(\"✅ Environment configuration is valid\");\n    }\n};\n// ============================================================================\n// UTILITY FUNCTIONS\n// ============================================================================\n/**\n * Gets environment-specific configuration value\n */ const getEnvVar = (key, defaultValue, required = false)=>{\n    const value = process.env[key] || defaultValue;\n    if (required && !value) {\n        throw new Error(`Required environment variable ${key} is not set`);\n    }\n    return value || \"\";\n};\n/**\n * Gets boolean environment variable\n */ const getBooleanEnvVar = (key, defaultValue = false)=>{\n    const value = process.env[key];\n    if (!value) return defaultValue;\n    return value.toLowerCase() === \"true\" || value === \"1\";\n};\n/**\n * Gets numeric environment variable\n */ const getNumericEnvVar = (key, defaultValue = 0)=>{\n    const value = process.env[key];\n    if (!value) return defaultValue;\n    const parsed = parseInt(value, 10);\n    return isNaN(parsed) ? defaultValue : parsed;\n};\n/**\n * Checks if running in specific environment\n */ const isEnvironment = (env)=>{\n    return getCurrentEnvironment() === env;\n};\n/**\n * Checks if running in development\n */ const isDevelopment = ()=>{\n    return isEnvironment(\"development\");\n};\n/**\n * Checks if running in production\n */ const isProduction = ()=>{\n    return isEnvironment(\"production\");\n};\n/**\n * Checks if running in test\n */ const isTest = ()=>{\n    return isEnvironment(\"test\");\n};\n// ============================================================================\n// CONSTANTS\n// ============================================================================\nconst ENVIRONMENT_CONSTANTS = {\n    DEFAULT_API_TIMEOUT: 30000,\n    DEFAULT_RATE_LIMIT: 100,\n    DEFAULT_CORS_ORIGINS: [\n        \"http://localhost:3000\",\n        \"https://mytechglasses.com\"\n    ],\n    STRIPE_WEBHOOK_TOLERANCE: 300,\n    SESSION_TIMEOUT: 30 * 60 * 1000,\n    CACHE_TTL: 5 * 60 * 1000\n};\n// ============================================================================\n// SINGLETON INSTANCE\n// ============================================================================\n// Cache the environment config to avoid repeated calculations\nlet cachedConfig = null;\n/**\n * Gets cached environment configuration\n */ const getConfig = ()=>{\n    if (!cachedConfig) {\n        cachedConfig = getEnvironmentConfig();\n    }\n    return cachedConfig;\n};\n/**\n * Resets cached configuration (useful for testing)\n */ const resetConfig = ()=>{\n    cachedConfig = null;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/environment.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/error-logging.ts":
/*!**********************************!*\
  !*** ./src/lib/error-logging.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ERROR_LOGGING_CONSTANTS: () => (/* binding */ ERROR_LOGGING_CONSTANTS),\n/* harmony export */   errorLogger: () => (/* binding */ errorLogger),\n/* harmony export */   logApiError: () => (/* binding */ logApiError),\n/* harmony export */   logCartError: () => (/* binding */ logCartError),\n/* harmony export */   logCheckoutError: () => (/* binding */ logCheckoutError),\n/* harmony export */   logNetworkError: () => (/* binding */ logNetworkError),\n/* harmony export */   logPaymentError: () => (/* binding */ logPaymentError),\n/* harmony export */   logPerformanceIssue: () => (/* binding */ logPerformanceIssue),\n/* harmony export */   logReactError: () => (/* binding */ logReactError),\n/* harmony export */   logStripeError: () => (/* binding */ logStripeError),\n/* harmony export */   logUIError: () => (/* binding */ logUIError),\n/* harmony export */   logValidationError: () => (/* binding */ logValidationError),\n/* harmony export */   measurePerformance: () => (/* binding */ measurePerformance),\n/* harmony export */   setupGlobalErrorHandlers: () => (/* binding */ setupGlobalErrorHandlers)\n/* harmony export */ });\n/**\n * Error logging and monitoring utilities\n * Provides comprehensive error tracking and reporting\n */ // ============================================================================\n// TYPES AND INTERFACES\n// ============================================================================\n// ============================================================================\n// ERROR STORAGE\n// ============================================================================\nclass ErrorStorage {\n    getStoredErrors() {\n        if (true) return [];\n        try {\n            const stored = localStorage.getItem(this.storageKey);\n            if (!stored) return [];\n            const errors = JSON.parse(stored);\n            // Filter out old errors\n            const cutoff = Date.now() - this.maxAge;\n            return errors.filter((error)=>new Date(error.timestamp).getTime() > cutoff);\n        } catch (error) {\n            console.warn(\"Failed to load stored errors:\", error);\n            return [];\n        }\n    }\n    saveErrors(errors) {\n        if (true) return;\n        try {\n            // Keep only the most recent errors\n            const recentErrors = errors.sort((a, b)=>new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()).slice(0, this.maxErrors);\n            localStorage.setItem(this.storageKey, JSON.stringify(recentErrors));\n        } catch (error) {\n            console.warn(\"Failed to save errors to storage:\", error);\n        }\n    }\n    addError(error) {\n        const errors = this.getStoredErrors();\n        errors.push(error);\n        this.saveErrors(errors);\n    }\n    getErrors() {\n        return this.getStoredErrors();\n    }\n    clearErrors() {\n        if (true) return;\n        localStorage.removeItem(this.storageKey);\n    }\n    markErrorResolved(errorId) {\n        const errors = this.getStoredErrors();\n        const error = errors.find((e)=>e.id === errorId);\n        if (error) {\n            error.resolved = true;\n            this.saveErrors(errors);\n        }\n    }\n    constructor(){\n        this.storageKey = \"my-tech-glasses-errors\";\n        this.maxErrors = 100;\n        this.maxAge = 7 * 24 * 60 * 60 * 1000 // 7 days\n        ;\n    }\n}\n// ============================================================================\n// ERROR LOGGER CLASS\n// ============================================================================\nclass ErrorLogger {\n    generateErrorId() {\n        return `err_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n    getErrorContext() {\n        const context = {\n            timestamp: new Date().toISOString(),\n            url:  false ? 0 : undefined,\n            userAgent:  false ? 0 : undefined\n        };\n        // Try to get session ID from various sources\n        if (false) {}\n        return context;\n    }\n    shouldReportToMonitoring(level, category) {\n        // Always report errors and warnings in production\n        if (this.isProduction && (level === \"error\" || level === \"warning\")) {\n            return true;\n        }\n        // Report critical categories regardless of environment\n        const criticalCategories = [\n            \"payment\",\n            \"stripe\",\n            \"api\"\n        ];\n        return criticalCategories.includes(category);\n    }\n    reportToMonitoring(error) {\n        // In a real application, this would send to services like:\n        // - Sentry\n        // - LogRocket\n        // - DataDog\n        // - Custom monitoring endpoint\n        if (false) {}\n        // Example: Send to custom monitoring endpoint\n        if (this.isProduction) {\n            fetch(\"/api/monitoring/errors\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    error: {\n                        id: error.id,\n                        level: error.level,\n                        category: error.category,\n                        message: error.message,\n                        stack: error.stack,\n                        context: error.context,\n                        timestamp: error.timestamp\n                    }\n                })\n            }).catch((err)=>{\n                console.warn(\"Failed to report error to monitoring:\", err);\n            });\n        }\n    }\n    log(level, category, message, error, additionalContext) {\n        const errorId = this.generateErrorId();\n        const context = {\n            ...this.getErrorContext(),\n            ...additionalContext\n        };\n        const loggedError = {\n            id: errorId,\n            level,\n            category,\n            message,\n            stack: error?.stack,\n            context,\n            timestamp: new Date().toISOString(),\n            resolved: false,\n            reportedToMonitoring: false\n        };\n        // Store error locally\n        this.storage.addError(loggedError);\n        // Console logging for development\n        if (this.enableConsoleLogging) {\n            const consoleMethod = level === \"error\" ? \"error\" : level === \"warning\" ? \"warn\" : level === \"info\" ? \"info\" : \"log\";\n            console[consoleMethod](`[${category.toUpperCase()}] ${message}`, {\n                errorId,\n                context,\n                originalError: error\n            });\n        }\n        // Report to monitoring if needed\n        if (this.shouldReportToMonitoring(level, category)) {\n            loggedError.reportedToMonitoring = true;\n            this.reportToMonitoring(loggedError);\n        }\n        return errorId;\n    }\n    error(category, message, error, context) {\n        return this.log(\"error\", category, message, error, context);\n    }\n    warning(category, message, error, context) {\n        return this.log(\"warning\", category, message, error, context);\n    }\n    info(category, message, context) {\n        return this.log(\"info\", category, message, undefined, context);\n    }\n    debug(category, message, context) {\n        return this.log(\"debug\", category, message, undefined, context);\n    }\n    getMetrics() {\n        const errors = this.storage.getErrors();\n        const errorsByCategory = {\n            payment: 0,\n            validation: 0,\n            network: 0,\n            cart: 0,\n            checkout: 0,\n            stripe: 0,\n            api: 0,\n            ui: 0,\n            unknown: 0\n        };\n        const errorsByLevel = {\n            error: 0,\n            warning: 0,\n            info: 0,\n            debug: 0\n        };\n        const messageCounts = {};\n        errors.forEach((error)=>{\n            errorsByCategory[error.category]++;\n            errorsByLevel[error.level]++;\n            messageCounts[error.message] = (messageCounts[error.message] || 0) + 1;\n        });\n        const topErrors = Object.entries(messageCounts).sort(([, a], [, b])=>b - a).slice(0, 10).map(([message, count])=>({\n                message,\n                count\n            }));\n        const recentErrors = errors.sort((a, b)=>new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()).slice(0, 20);\n        return {\n            totalErrors: errors.length,\n            errorsByCategory,\n            errorsByLevel,\n            recentErrors,\n            topErrors\n        };\n    }\n    clearErrors() {\n        this.storage.clearErrors();\n    }\n    markResolved(errorId) {\n        this.storage.markErrorResolved(errorId);\n    }\n    constructor(){\n        this.storage = new ErrorStorage();\n        this.isProduction = \"development\" === \"production\";\n        this.enableConsoleLogging = !this.isProduction;\n    }\n}\n// ============================================================================\n// SINGLETON INSTANCE\n// ============================================================================\nconst errorLogger = new ErrorLogger();\n// ============================================================================\n// CONVENIENCE FUNCTIONS\n// ============================================================================\n/**\n * Logs payment-related errors\n */ const logPaymentError = (message, error, context)=>{\n    return errorLogger.error(\"payment\", message, error, context);\n};\n/**\n * Logs Stripe-related errors\n */ const logStripeError = (message, error, context)=>{\n    return errorLogger.error(\"stripe\", message, error, context);\n};\n/**\n * Logs validation errors\n */ const logValidationError = (message, context)=>{\n    return errorLogger.warning(\"validation\", message, undefined, context);\n};\n/**\n * Logs cart-related errors\n */ const logCartError = (message, error, context)=>{\n    return errorLogger.error(\"cart\", message, error, context);\n};\n/**\n * Logs checkout-related errors\n */ const logCheckoutError = (message, error, context)=>{\n    return errorLogger.error(\"checkout\", message, error, context);\n};\n/**\n * Logs API-related errors\n */ const logApiError = (message, error, context)=>{\n    return errorLogger.error(\"api\", message, error, context);\n};\n/**\n * Logs network-related errors\n */ const logNetworkError = (message, error, context)=>{\n    return errorLogger.error(\"network\", message, error, context);\n};\n/**\n * Logs UI-related errors\n */ const logUIError = (message, error, context)=>{\n    return errorLogger.warning(\"ui\", message, error, context);\n};\n// ============================================================================\n// ERROR BOUNDARY INTEGRATION\n// ============================================================================\n/**\n * Function to be called from React Error Boundaries\n */ const logReactError = (error, errorInfo)=>{\n    return errorLogger.error(\"ui\", `React Error: ${error.message}`, error, {\n        componentStack: errorInfo.componentStack,\n        errorBoundary: true\n    });\n};\n// ============================================================================\n// GLOBAL ERROR HANDLERS\n// ============================================================================\n/**\n * Sets up global error handlers for unhandled errors\n */ const setupGlobalErrorHandlers = ()=>{\n    if (true) return;\n    // Handle unhandled promise rejections\n    window.addEventListener(\"unhandledrejection\", (event)=>{\n        errorLogger.error(\"unknown\", `Unhandled Promise Rejection: ${event.reason}`, event.reason instanceof Error ? event.reason : undefined, {\n            type: \"unhandledrejection\",\n            promise: event.promise\n        });\n    });\n    // Handle uncaught errors\n    window.addEventListener(\"error\", (event)=>{\n        errorLogger.error(\"unknown\", `Uncaught Error: ${event.message}`, event.error, {\n            type: \"uncaughtError\",\n            filename: event.filename,\n            lineno: event.lineno,\n            colno: event.colno\n        });\n    });\n};\n// ============================================================================\n// PERFORMANCE MONITORING\n// ============================================================================\n/**\n * Logs performance issues\n */ const logPerformanceIssue = (metric, value, threshold)=>{\n    if (value > threshold) {\n        errorLogger.warning(\"ui\", `Performance issue: ${metric} took ${value}ms (threshold: ${threshold}ms)`, undefined, {\n            metric,\n            value,\n            threshold,\n            performance: true\n        });\n    }\n};\n/**\n * Measures and logs function execution time\n */ const measurePerformance = (name, fn, threshold = 1000)=>{\n    const start = performance.now();\n    const result = fn();\n    const duration = performance.now() - start;\n    logPerformanceIssue(name, duration, threshold);\n    return result;\n};\n// ============================================================================\n// CONSTANTS\n// ============================================================================\nconst ERROR_LOGGING_CONSTANTS = {\n    MAX_STORED_ERRORS: 100,\n    MAX_ERROR_AGE_DAYS: 7,\n    PERFORMANCE_THRESHOLDS: {\n        API_CALL: 5000,\n        COMPONENT_RENDER: 100,\n        CART_OPERATION: 500,\n        PAYMENT_OPERATION: 10000\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/error-logging.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/monitoring.ts":
/*!*******************************!*\
  !*** ./src/lib/monitoring.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   businessMetrics: () => (/* binding */ businessMetrics),\n/* harmony export */   getMonitoringDashboard: () => (/* binding */ getMonitoringDashboard),\n/* harmony export */   healthMonitor: () => (/* binding */ healthMonitor),\n/* harmony export */   initializeMonitoring: () => (/* binding */ initializeMonitoring),\n/* harmony export */   measureTime: () => (/* binding */ measureTime),\n/* harmony export */   paymentMonitor: () => (/* binding */ paymentMonitor),\n/* harmony export */   performanceMonitor: () => (/* binding */ performanceMonitor),\n/* harmony export */   recordBusiness: () => (/* binding */ recordBusiness),\n/* harmony export */   recordHealth: () => (/* binding */ recordHealth),\n/* harmony export */   recordPerformance: () => (/* binding */ recordPerformance),\n/* harmony export */   trackPayment: () => (/* binding */ trackPayment)\n/* harmony export */ });\n/* harmony import */ var _lib_environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/environment */ \"(rsc)/./src/lib/environment.ts\");\n/* harmony import */ var _lib_error_logging__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/error-logging */ \"(rsc)/./src/lib/error-logging.ts\");\n/**\n * Production monitoring and logging system\n * Handles performance monitoring, error tracking, and analytics\n */ \n\n// ============================================================================\n// PAYMENT EVENT TRACKING\n// ============================================================================\nclass PaymentMonitor {\n    /**\n   * Tracks a payment event\n   */ trackPaymentEvent(event) {\n        if (!(0,_lib_environment__WEBPACK_IMPORTED_MODULE_0__.isFeatureEnabled)(\"analytics\")) {\n            return;\n        }\n        const paymentEvent = {\n            ...event,\n            timestamp: new Date().toISOString()\n        };\n        // Store locally\n        this.events.push(paymentEvent);\n        if (this.events.length > this.maxEvents) {\n            this.events.shift();\n        }\n        // Send to external analytics\n        this.sendToAnalytics(paymentEvent);\n        // Log critical events\n        if (event.type === \"payment_failed\") {\n            _lib_error_logging__WEBPACK_IMPORTED_MODULE_1__.errorLogger.error(\"payment\", `Payment failed: ${event.errorMessage}`, undefined, {\n                sessionId: event.sessionId,\n                orderId: event.orderId,\n                amount: event.amount,\n                errorCode: event.errorCode\n            });\n        }\n    }\n    /**\n   * Gets payment events for analysis\n   */ getPaymentEvents(limit = 100) {\n        return this.events.slice(-limit);\n    }\n    /**\n   * Gets payment metrics\n   */ getPaymentMetrics() {\n        const total = this.events.length;\n        const successful = this.events.filter((e)=>e.type === \"payment_succeeded\").length;\n        const failed = this.events.filter((e)=>e.type === \"payment_failed\").length;\n        const cancelled = this.events.filter((e)=>e.type === \"payment_cancelled\").length;\n        const successRate = total > 0 ? successful / total * 100 : 0;\n        const amounts = this.events.filter((e)=>e.amount && e.type === \"payment_succeeded\").map((e)=>e.amount);\n        const averageAmount = amounts.length > 0 ? amounts.reduce((sum, amount)=>sum + amount, 0) / amounts.length : 0;\n        return {\n            totalPayments: total,\n            successfulPayments: successful,\n            failedPayments: failed,\n            cancelledPayments: cancelled,\n            successRate,\n            averageAmount\n        };\n    }\n    /**\n   * Sends event to external analytics services\n   */ sendToAnalytics(event) {\n        if (!(0,_lib_environment__WEBPACK_IMPORTED_MODULE_0__.isFeatureEnabled)(\"analytics\")) {\n            return;\n        }\n        // Google Analytics 4\n        if (false) {}\n        // Send to custom analytics endpoint\n        if (typeof fetch !== \"undefined\") {\n            fetch(\"/api/analytics/events\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    event\n                })\n            }).catch((error)=>{\n                console.warn(\"Failed to send analytics event:\", error);\n            });\n        }\n    }\n    constructor(){\n        this.events = [];\n        this.maxEvents = 1000;\n    }\n}\n// ============================================================================\n// PERFORMANCE MONITORING\n// ============================================================================\nclass PerformanceMonitor {\n    /**\n   * Records a performance metric\n   */ recordMetric(metric) {\n        if (!(0,_lib_environment__WEBPACK_IMPORTED_MODULE_0__.isFeatureEnabled)(\"performance-monitoring\")) {\n            return;\n        }\n        const performanceMetric = {\n            ...metric,\n            timestamp: new Date().toISOString()\n        };\n        this.metrics.push(performanceMetric);\n        if (this.metrics.length > this.maxMetrics) {\n            this.metrics.shift();\n        }\n        // Send to monitoring service\n        this.sendToMonitoring(performanceMetric);\n        // Alert on performance issues\n        this.checkPerformanceThresholds(performanceMetric);\n    }\n    /**\n   * Measures execution time of a function\n   */ measureExecutionTime(name, fn, tags) {\n        const start = performance.now();\n        const finish = (result)=>{\n            const duration = performance.now() - start;\n            this.recordMetric({\n                name,\n                value: duration,\n                unit: \"ms\",\n                tags\n            });\n            return result;\n        };\n        try {\n            const result = fn();\n            if (result instanceof Promise) {\n                return result.then(finish).catch((error)=>{\n                    finish(error);\n                    throw error;\n                });\n            }\n            return finish(result);\n        } catch (error) {\n            finish(error);\n            throw error;\n        }\n    }\n    /**\n   * Gets performance metrics\n   */ getMetrics(name, limit = 100) {\n        let filtered = this.metrics;\n        if (name) {\n            filtered = filtered.filter((m)=>m.name === name);\n        }\n        return filtered.slice(-limit);\n    }\n    /**\n   * Gets performance summary\n   */ getPerformanceSummary() {\n        const summary = {};\n        // Group metrics by name\n        const grouped = this.metrics.reduce((acc, metric)=>{\n            if (!acc[metric.name]) {\n                acc[metric.name] = [];\n            }\n            acc[metric.name].push(metric.value);\n            return acc;\n        }, {});\n        // Calculate statistics for each metric\n        Object.entries(grouped).forEach(([name, values])=>{\n            const sorted = values.sort((a, b)=>a - b);\n            const count = values.length;\n            const sum = values.reduce((a, b)=>a + b, 0);\n            summary[name] = {\n                count,\n                average: sum / count,\n                min: sorted[0],\n                max: sorted[sorted.length - 1],\n                p95: sorted[Math.floor(sorted.length * 0.95)]\n            };\n        });\n        return summary;\n    }\n    /**\n   * Sends metric to monitoring service\n   */ sendToMonitoring(metric) {\n        // Send to monitoring service (e.g., DataDog, New Relic)\n        if (typeof fetch !== \"undefined\") {\n            fetch(\"/api/monitoring/metrics\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    metric\n                })\n            }).catch((error)=>{\n                console.warn(\"Failed to send performance metric:\", error);\n            });\n        }\n    }\n    /**\n   * Checks performance thresholds and alerts\n   */ checkPerformanceThresholds(metric) {\n        const thresholds = {\n            \"api_response_time\": 5000,\n            \"checkout_session_creation\": 10000,\n            \"stripe_redirect\": 3000,\n            \"cart_operation\": 1000,\n            \"page_load\": 3000 // 3 seconds\n        };\n        const threshold = thresholds[metric.name];\n        if (threshold && metric.value > threshold) {\n            _lib_error_logging__WEBPACK_IMPORTED_MODULE_1__.errorLogger.warning(\"ui\", `Performance threshold exceeded: ${metric.name} took ${metric.value}ms (threshold: ${threshold}ms)`, undefined, {\n                metric: metric.name,\n                value: metric.value,\n                threshold,\n                tags: metric.tags\n            });\n        }\n    }\n    constructor(){\n        this.metrics = [];\n        this.maxMetrics = 1000;\n    }\n}\n// ============================================================================\n// HEALTH MONITORING\n// ============================================================================\nclass HealthMonitor {\n    /**\n   * Records a health check result\n   */ recordHealthCheck(check) {\n        const healthCheck = {\n            ...check,\n            timestamp: new Date().toISOString()\n        };\n        this.checks.push(healthCheck);\n        if (this.checks.length > this.maxChecks) {\n            this.checks.shift();\n        }\n        // Alert on unhealthy services\n        if (check.status === \"unhealthy\") {\n            _lib_error_logging__WEBPACK_IMPORTED_MODULE_1__.errorLogger.error(\"api\", `Service unhealthy: ${check.service}`, undefined, {\n                service: check.service,\n                error: check.error,\n                responseTime: check.responseTime\n            });\n        }\n    }\n    /**\n   * Gets health check results\n   */ getHealthChecks(service, limit = 50) {\n        let filtered = this.checks;\n        if (service) {\n            filtered = filtered.filter((c)=>c.service === service);\n        }\n        return filtered.slice(-limit);\n    }\n    /**\n   * Gets overall system health\n   */ getSystemHealth() {\n        const services = {};\n        // Get latest check for each service\n        const latestChecks = this.checks.reduce((acc, check)=>{\n            if (!acc[check.service] || check.timestamp > acc[check.service].timestamp) {\n                acc[check.service] = check;\n            }\n            return acc;\n        }, {});\n        // Calculate service health\n        Object.entries(latestChecks).forEach(([service, check])=>{\n            const serviceChecks = this.checks.filter((c)=>c.service === service);\n            const healthyChecks = serviceChecks.filter((c)=>c.status === \"healthy\").length;\n            const uptime = serviceChecks.length > 0 ? healthyChecks / serviceChecks.length * 100 : 0;\n            services[service] = {\n                status: check.status,\n                lastCheck: check.timestamp,\n                uptime\n            };\n        });\n        // Determine overall system status\n        const serviceStatuses = Object.values(services).map((s)=>s.status);\n        const overallStatus = serviceStatuses.includes(\"unhealthy\") ? \"unhealthy\" : serviceStatuses.includes(\"degraded\") ? \"degraded\" : \"healthy\";\n        return {\n            status: overallStatus,\n            services\n        };\n    }\n    constructor(){\n        this.checks = [];\n        this.maxChecks = 100;\n    }\n}\n// ============================================================================\n// BUSINESS METRICS\n// ============================================================================\nclass BusinessMetricsMonitor {\n    /**\n   * Records a business metric\n   */ recordMetric(metric) {\n        if (!(0,_lib_environment__WEBPACK_IMPORTED_MODULE_0__.isFeatureEnabled)(\"analytics\")) {\n            return;\n        }\n        const businessMetric = {\n            ...metric,\n            timestamp: new Date().toISOString()\n        };\n        this.metrics.push(businessMetric);\n        if (this.metrics.length > this.maxMetrics) {\n            this.metrics.shift();\n        }\n        // Send to analytics\n        this.sendToAnalytics(businessMetric);\n    }\n    /**\n   * Gets business metrics\n   */ getMetrics(name, timeRange) {\n        let filtered = this.metrics;\n        if (name) {\n            filtered = filtered.filter((m)=>m.name === name);\n        }\n        if (timeRange) {\n            filtered = filtered.filter((m)=>m.timestamp >= timeRange.start && m.timestamp <= timeRange.end);\n        }\n        return filtered;\n    }\n    /**\n   * Gets revenue metrics\n   */ getRevenueMetrics() {\n        const revenueMetrics = this.metrics.filter((m)=>m.name === \"revenue\");\n        const orderMetrics = this.metrics.filter((m)=>m.name === \"order_completed\");\n        const sessionMetrics = this.metrics.filter((m)=>m.name === \"session_started\");\n        const totalRevenue = revenueMetrics.reduce((sum, m)=>sum + m.value, 0);\n        const totalOrders = orderMetrics.length;\n        const totalSessions = sessionMetrics.length;\n        const averageOrderValue = totalOrders > 0 ? totalRevenue / totalOrders : 0;\n        const conversionRate = totalSessions > 0 ? totalOrders / totalSessions * 100 : 0;\n        // Calculate top products\n        const productRevenue = {};\n        orderMetrics.forEach((metric)=>{\n            const productName = metric.dimensions?.product_name || \"Unknown\";\n            const revenue = metric.value || 0;\n            if (!productRevenue[productName]) {\n                productRevenue[productName] = {\n                    revenue: 0,\n                    orders: 0\n                };\n            }\n            productRevenue[productName].revenue += revenue;\n            productRevenue[productName].orders += 1;\n        });\n        const topProducts = Object.entries(productRevenue).map(([name, data])=>({\n                name,\n                ...data\n            })).sort((a, b)=>b.revenue - a.revenue).slice(0, 10);\n        return {\n            totalRevenue,\n            averageOrderValue,\n            conversionRate,\n            topProducts\n        };\n    }\n    /**\n   * Sends metric to analytics\n   */ sendToAnalytics(metric) {\n        // Send to analytics service\n        if (typeof fetch !== \"undefined\") {\n            fetch(\"/api/analytics/business-metrics\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    metric\n                })\n            }).catch((error)=>{\n                console.warn(\"Failed to send business metric:\", error);\n            });\n        }\n    }\n    constructor(){\n        this.metrics = [];\n        this.maxMetrics = 1000;\n    }\n}\n// ============================================================================\n// SINGLETON INSTANCES\n// ============================================================================\nconst paymentMonitor = new PaymentMonitor();\nconst performanceMonitor = new PerformanceMonitor();\nconst healthMonitor = new HealthMonitor();\nconst businessMetrics = new BusinessMetricsMonitor();\n// ============================================================================\n// CONVENIENCE FUNCTIONS\n// ============================================================================\n/**\n * Tracks a payment event\n */ const trackPayment = (event)=>{\n    paymentMonitor.trackPaymentEvent(event);\n};\n/**\n * Records a performance metric\n */ const recordPerformance = (metric)=>{\n    performanceMonitor.recordMetric(metric);\n};\n/**\n * Measures function execution time\n */ const measureTime = (name, fn, tags)=>{\n    return performanceMonitor.measureExecutionTime(name, fn, tags);\n};\n/**\n * Records a health check\n */ const recordHealth = (check)=>{\n    healthMonitor.recordHealthCheck(check);\n};\n/**\n * Records a business metric\n */ const recordBusiness = (metric)=>{\n    businessMetrics.recordMetric(metric);\n};\n// ============================================================================\n// MONITORING DASHBOARD DATA\n// ============================================================================\n/**\n * Gets comprehensive monitoring data for dashboard\n */ const getMonitoringDashboard = ()=>{\n    return {\n        timestamp: new Date().toISOString(),\n        environment: (0,_lib_environment__WEBPACK_IMPORTED_MODULE_0__.getConfig)(),\n        payment: paymentMonitor.getPaymentMetrics(),\n        performance: performanceMonitor.getPerformanceSummary(),\n        health: healthMonitor.getSystemHealth(),\n        business: businessMetrics.getRevenueMetrics(),\n        errors: _lib_error_logging__WEBPACK_IMPORTED_MODULE_1__.errorLogger.getMetrics()\n    };\n};\n// ============================================================================\n// INITIALIZATION\n// ============================================================================\n/**\n * Initializes monitoring system\n */ const initializeMonitoring = ()=>{\n    const config = (0,_lib_environment__WEBPACK_IMPORTED_MODULE_0__.getConfig)();\n    if (config.isProduction) {\n        console.log(\"\\uD83D\\uDD0D Initializing production monitoring...\");\n        // Set up periodic health checks\n        setInterval(()=>{\n            // Check Stripe connectivity\n            fetch(\"/api/health\").then((response)=>{\n                recordHealth({\n                    service: \"api\",\n                    status: response.ok ? \"healthy\" : \"unhealthy\",\n                    responseTime: performance.now()\n                });\n            }).catch((error)=>{\n                recordHealth({\n                    service: \"api\",\n                    status: \"unhealthy\",\n                    error: error.message\n                });\n            });\n        }, 60000) // Every minute\n        ;\n        console.log(\"✅ Production monitoring initialized\");\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/monitoring.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/stripe.ts":
/*!***************************!*\
  !*** ./src/lib/stripe.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getStripe: () => (/* binding */ getStripe),\n/* harmony export */   getStripeConfig: () => (/* binding */ getStripeConfig),\n/* harmony export */   getStripeServer: () => (/* binding */ getStripeServer),\n/* harmony export */   testStripeConnection: () => (/* binding */ testStripeConnection)\n/* harmony export */ });\n/* harmony import */ var _stripe_stripe_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @stripe/stripe-js */ \"(rsc)/./node_modules/@stripe/stripe-js/lib/index.mjs\");\n/* harmony import */ var stripe__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! stripe */ \"(rsc)/./node_modules/stripe/esm/stripe.esm.node.js\");\n\n\n// Environment validation\nconst validateEnvironment = ()=>{\n    const publishableKey = \"pk_test_51R9pLT2KYi1EVCMzHc8vDqSNTMpgfL5kMzX4qP68gdQp53ioubKm4dquVENb7YByxZ06bxOJhjzdnVLD2vo5wBbh00O0ngluNA\";\n    const secretKey = process.env.STRIPE_SECRET_KEY;\n    if (true) {\n        // Server-side validation\n        if (!secretKey) {\n            throw new Error(\"STRIPE_SECRET_KEY is required but not set in environment variables\");\n        }\n        if (!secretKey.startsWith(\"sk_\")) {\n            throw new Error('STRIPE_SECRET_KEY must start with \"sk_\"');\n        }\n    }\n    // Client-side validation\n    if (!publishableKey) {\n        throw new Error(\"NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY is required but not set in environment variables\");\n    }\n    if (!publishableKey.startsWith(\"pk_\")) {\n        throw new Error('NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY must start with \"pk_\"');\n    }\n    // Environment consistency check\n    const isTestMode = publishableKey.includes(\"test\");\n    const isSecretTestMode = secretKey?.includes(\"test\") ?? true;\n    if (isTestMode !== isSecretTestMode) {\n        console.warn(\"Warning: Stripe keys environment mismatch (test vs live)\");\n    }\n    return {\n        publishableKey,\n        secretKey,\n        isTestMode\n    };\n};\n// Client-side Stripe instance\nlet stripePromise;\nconst getStripe = ()=>{\n    if (!stripePromise) {\n        const { publishableKey } = validateEnvironment();\n        stripePromise = (0,_stripe_stripe_js__WEBPACK_IMPORTED_MODULE_0__.loadStripe)(publishableKey);\n    }\n    return stripePromise;\n};\n// Server-side Stripe instance\nlet stripeServer = null;\nconst getStripeServer = ()=>{\n    if (!stripeServer) {\n        const { secretKey } = validateEnvironment();\n        if (!secretKey) {\n            throw new Error(\"Cannot initialize server-side Stripe without STRIPE_SECRET_KEY\");\n        }\n        stripeServer = new stripe__WEBPACK_IMPORTED_MODULE_1__[\"default\"](secretKey, {\n            apiVersion: \"2024-06-20\",\n            typescript: true\n        });\n    }\n    return stripeServer;\n};\n// Configuration utilities\nconst getStripeConfig = ()=>{\n    const { publishableKey, secretKey, isTestMode } = validateEnvironment();\n    return {\n        publishableKey,\n        secretKey: secretKey ? \"***\" + secretKey.slice(-4) : undefined,\n        isTestMode,\n        environment: \"development\",\n        apiVersion: \"2024-06-20\"\n    };\n};\n// Test connection utility\nconst testStripeConnection = async ()=>{\n    try {\n        if (false) {} else {\n            // Server-side test\n            const stripe = getStripeServer();\n            await stripe.customers.list({\n                limit: 1\n            });\n            return true;\n        }\n    } catch (error) {\n        console.error(\"Stripe connection test failed:\", error);\n        return false;\n    }\n};\n// Legacy export for backward compatibility\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getStripe);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3N0cmlwZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQXNEO0FBQ3JCO0FBRWpDLHlCQUF5QjtBQUN6QixNQUFNRSxzQkFBc0I7SUFDMUIsTUFBTUMsaUJBQWlCQyw2R0FBOEM7SUFDckUsTUFBTUcsWUFBWUgsUUFBUUMsR0FBRyxDQUFDRyxpQkFBaUI7SUFFL0MsSUFBSSxJQUFrQixFQUFhO1FBQ2pDLHlCQUF5QjtRQUN6QixJQUFJLENBQUNELFdBQVc7WUFDZCxNQUFNLElBQUlFLE1BQU07UUFDbEI7UUFDQSxJQUFJLENBQUNGLFVBQVVHLFVBQVUsQ0FBQyxRQUFRO1lBQ2hDLE1BQU0sSUFBSUQsTUFBTTtRQUNsQjtJQUNGO0lBRUEseUJBQXlCO0lBQ3pCLElBQUksQ0FBQ04sZ0JBQWdCO1FBQ25CLE1BQU0sSUFBSU0sTUFBTTtJQUNsQjtJQUNBLElBQUksQ0FBQ04sZUFBZU8sVUFBVSxDQUFDLFFBQVE7UUFDckMsTUFBTSxJQUFJRCxNQUFNO0lBQ2xCO0lBRUEsZ0NBQWdDO0lBQ2hDLE1BQU1FLGFBQWFSLGVBQWVTLFFBQVEsQ0FBQztJQUMzQyxNQUFNQyxtQkFBbUJOLFdBQVdLLFNBQVMsV0FBVztJQUV4RCxJQUFJRCxlQUFlRSxrQkFBa0I7UUFDbkNDLFFBQVFDLElBQUksQ0FBQztJQUNmO0lBRUEsT0FBTztRQUNMWjtRQUNBSTtRQUNBSTtJQUNGO0FBQ0Y7QUFFQSw4QkFBOEI7QUFDOUIsSUFBSUs7QUFFRyxNQUFNQyxZQUFZO0lBQ3ZCLElBQUksQ0FBQ0QsZUFBZTtRQUNsQixNQUFNLEVBQUViLGNBQWMsRUFBRSxHQUFHRDtRQUMzQmMsZ0JBQWdCaEIsNkRBQVVBLENBQUNHO0lBQzdCO0lBQ0EsT0FBT2E7QUFDVCxFQUFDO0FBRUQsOEJBQThCO0FBQzlCLElBQUlFLGVBQW9DO0FBRWpDLE1BQU1DLGtCQUFrQjtJQUM3QixJQUFJLENBQUNELGNBQWM7UUFDakIsTUFBTSxFQUFFWCxTQUFTLEVBQUUsR0FBR0w7UUFFdEIsSUFBSSxDQUFDSyxXQUFXO1lBQ2QsTUFBTSxJQUFJRSxNQUFNO1FBQ2xCO1FBRUFTLGVBQWUsSUFBSWpCLDhDQUFZQSxDQUFDTSxXQUFXO1lBQ3pDYSxZQUFZO1lBQ1pDLFlBQVk7UUFDZDtJQUNGO0lBRUEsT0FBT0g7QUFDVCxFQUFDO0FBRUQsMEJBQTBCO0FBQ25CLE1BQU1JLGtCQUFrQjtJQUM3QixNQUFNLEVBQUVuQixjQUFjLEVBQUVJLFNBQVMsRUFBRUksVUFBVSxFQUFFLEdBQUdUO0lBRWxELE9BQU87UUFDTEM7UUFDQUksV0FBV0EsWUFBWSxRQUFRQSxVQUFVZ0IsS0FBSyxDQUFDLENBQUMsS0FBS0M7UUFDckRiO1FBQ0FjLGFBaEZKO1FBaUZJTCxZQUFZO0lBQ2Q7QUFDRixFQUFDO0FBRUQsMEJBQTBCO0FBQ25CLE1BQU1NLHVCQUF1QjtJQUNsQyxJQUFJO1FBQ0YsSUFBSSxLQUFrQixFQUFhLEVBSWxDLE1BQU07WUFDTCxtQkFBbUI7WUFDbkIsTUFBTUMsU0FBU1I7WUFDZixNQUFNUSxPQUFPQyxTQUFTLENBQUNDLElBQUksQ0FBQztnQkFBRUMsT0FBTztZQUFFO1lBQ3ZDLE9BQU87UUFDVDtJQUNGLEVBQUUsT0FBT0MsT0FBTztRQUNkakIsUUFBUWlCLEtBQUssQ0FBQyxrQ0FBa0NBO1FBQ2hELE9BQU87SUFDVDtBQUNGLEVBQUM7QUFFRCwyQ0FBMkM7QUFDM0MsaUVBQWVkLFNBQVNBLEVBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS10ZWNoLWdsYXNzZXMvLi9zcmMvbGliL3N0cmlwZS50cz83OThhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGxvYWRTdHJpcGUsIFN0cmlwZSB9IGZyb20gJ0BzdHJpcGUvc3RyaXBlLWpzJ1xuaW1wb3J0IFN0cmlwZVNlcnZlciBmcm9tICdzdHJpcGUnXG5cbi8vIEVudmlyb25tZW50IHZhbGlkYXRpb25cbmNvbnN0IHZhbGlkYXRlRW52aXJvbm1lbnQgPSAoKSA9PiB7XG4gIGNvbnN0IHB1Ymxpc2hhYmxlS2V5ID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfU1RSSVBFX1BVQkxJU0hBQkxFX0tFWVxuICBjb25zdCBzZWNyZXRLZXkgPSBwcm9jZXNzLmVudi5TVFJJUEVfU0VDUkVUX0tFWVxuXG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICAgIC8vIFNlcnZlci1zaWRlIHZhbGlkYXRpb25cbiAgICBpZiAoIXNlY3JldEtleSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTVFJJUEVfU0VDUkVUX0tFWSBpcyByZXF1aXJlZCBidXQgbm90IHNldCBpbiBlbnZpcm9ubWVudCB2YXJpYWJsZXMnKVxuICAgIH1cbiAgICBpZiAoIXNlY3JldEtleS5zdGFydHNXaXRoKCdza18nKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTVFJJUEVfU0VDUkVUX0tFWSBtdXN0IHN0YXJ0IHdpdGggXCJza19cIicpXG4gICAgfVxuICB9XG5cbiAgLy8gQ2xpZW50LXNpZGUgdmFsaWRhdGlvblxuICBpZiAoIXB1Ymxpc2hhYmxlS2V5KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdORVhUX1BVQkxJQ19TVFJJUEVfUFVCTElTSEFCTEVfS0VZIGlzIHJlcXVpcmVkIGJ1dCBub3Qgc2V0IGluIGVudmlyb25tZW50IHZhcmlhYmxlcycpXG4gIH1cbiAgaWYgKCFwdWJsaXNoYWJsZUtleS5zdGFydHNXaXRoKCdwa18nKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignTkVYVF9QVUJMSUNfU1RSSVBFX1BVQkxJU0hBQkxFX0tFWSBtdXN0IHN0YXJ0IHdpdGggXCJwa19cIicpXG4gIH1cblxuICAvLyBFbnZpcm9ubWVudCBjb25zaXN0ZW5jeSBjaGVja1xuICBjb25zdCBpc1Rlc3RNb2RlID0gcHVibGlzaGFibGVLZXkuaW5jbHVkZXMoJ3Rlc3QnKVxuICBjb25zdCBpc1NlY3JldFRlc3RNb2RlID0gc2VjcmV0S2V5Py5pbmNsdWRlcygndGVzdCcpID8/IHRydWVcblxuICBpZiAoaXNUZXN0TW9kZSAhPT0gaXNTZWNyZXRUZXN0TW9kZSkge1xuICAgIGNvbnNvbGUud2FybignV2FybmluZzogU3RyaXBlIGtleXMgZW52aXJvbm1lbnQgbWlzbWF0Y2ggKHRlc3QgdnMgbGl2ZSknKVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwdWJsaXNoYWJsZUtleSxcbiAgICBzZWNyZXRLZXksXG4gICAgaXNUZXN0TW9kZVxuICB9XG59XG5cbi8vIENsaWVudC1zaWRlIFN0cmlwZSBpbnN0YW5jZVxubGV0IHN0cmlwZVByb21pc2U6IFByb21pc2U8U3RyaXBlIHwgbnVsbD5cblxuZXhwb3J0IGNvbnN0IGdldFN0cmlwZSA9ICgpOiBQcm9taXNlPFN0cmlwZSB8IG51bGw+ID0+IHtcbiAgaWYgKCFzdHJpcGVQcm9taXNlKSB7XG4gICAgY29uc3QgeyBwdWJsaXNoYWJsZUtleSB9ID0gdmFsaWRhdGVFbnZpcm9ubWVudCgpXG4gICAgc3RyaXBlUHJvbWlzZSA9IGxvYWRTdHJpcGUocHVibGlzaGFibGVLZXkpXG4gIH1cbiAgcmV0dXJuIHN0cmlwZVByb21pc2Vcbn1cblxuLy8gU2VydmVyLXNpZGUgU3RyaXBlIGluc3RhbmNlXG5sZXQgc3RyaXBlU2VydmVyOiBTdHJpcGVTZXJ2ZXIgfCBudWxsID0gbnVsbFxuXG5leHBvcnQgY29uc3QgZ2V0U3RyaXBlU2VydmVyID0gKCk6IFN0cmlwZVNlcnZlciA9PiB7XG4gIGlmICghc3RyaXBlU2VydmVyKSB7XG4gICAgY29uc3QgeyBzZWNyZXRLZXkgfSA9IHZhbGlkYXRlRW52aXJvbm1lbnQoKVxuICAgIFxuICAgIGlmICghc2VjcmV0S2V5KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBpbml0aWFsaXplIHNlcnZlci1zaWRlIFN0cmlwZSB3aXRob3V0IFNUUklQRV9TRUNSRVRfS0VZJylcbiAgICB9XG5cbiAgICBzdHJpcGVTZXJ2ZXIgPSBuZXcgU3RyaXBlU2VydmVyKHNlY3JldEtleSwge1xuICAgICAgYXBpVmVyc2lvbjogJzIwMjQtMDYtMjAnLFxuICAgICAgdHlwZXNjcmlwdDogdHJ1ZSxcbiAgICB9KVxuICB9XG4gIFxuICByZXR1cm4gc3RyaXBlU2VydmVyXG59XG5cbi8vIENvbmZpZ3VyYXRpb24gdXRpbGl0aWVzXG5leHBvcnQgY29uc3QgZ2V0U3RyaXBlQ29uZmlnID0gKCkgPT4ge1xuICBjb25zdCB7IHB1Ymxpc2hhYmxlS2V5LCBzZWNyZXRLZXksIGlzVGVzdE1vZGUgfSA9IHZhbGlkYXRlRW52aXJvbm1lbnQoKVxuICBcbiAgcmV0dXJuIHtcbiAgICBwdWJsaXNoYWJsZUtleSxcbiAgICBzZWNyZXRLZXk6IHNlY3JldEtleSA/ICcqKionICsgc2VjcmV0S2V5LnNsaWNlKC00KSA6IHVuZGVmaW5lZCwgLy8gTWFza2VkIGZvciBsb2dnaW5nXG4gICAgaXNUZXN0TW9kZSxcbiAgICBlbnZpcm9ubWVudDogcHJvY2Vzcy5lbnYuTk9ERV9FTlYsXG4gICAgYXBpVmVyc2lvbjogJzIwMjQtMDYtMjAnIGFzIGNvbnN0XG4gIH1cbn1cblxuLy8gVGVzdCBjb25uZWN0aW9uIHV0aWxpdHlcbmV4cG9ydCBjb25zdCB0ZXN0U3RyaXBlQ29ubmVjdGlvbiA9IGFzeW5jICgpOiBQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgdHJ5IHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIENsaWVudC1zaWRlIHRlc3RcbiAgICAgIGNvbnN0IHN0cmlwZSA9IGF3YWl0IGdldFN0cmlwZSgpXG4gICAgICByZXR1cm4gc3RyaXBlICE9PSBudWxsXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNlcnZlci1zaWRlIHRlc3RcbiAgICAgIGNvbnN0IHN0cmlwZSA9IGdldFN0cmlwZVNlcnZlcigpXG4gICAgICBhd2FpdCBzdHJpcGUuY3VzdG9tZXJzLmxpc3QoeyBsaW1pdDogMSB9KVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignU3RyaXBlIGNvbm5lY3Rpb24gdGVzdCBmYWlsZWQ6JywgZXJyb3IpXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuLy8gTGVnYWN5IGV4cG9ydCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuZXhwb3J0IGRlZmF1bHQgZ2V0U3RyaXBlIl0sIm5hbWVzIjpbImxvYWRTdHJpcGUiLCJTdHJpcGVTZXJ2ZXIiLCJ2YWxpZGF0ZUVudmlyb25tZW50IiwicHVibGlzaGFibGVLZXkiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfU1RSSVBFX1BVQkxJU0hBQkxFX0tFWSIsInNlY3JldEtleSIsIlNUUklQRV9TRUNSRVRfS0VZIiwiRXJyb3IiLCJzdGFydHNXaXRoIiwiaXNUZXN0TW9kZSIsImluY2x1ZGVzIiwiaXNTZWNyZXRUZXN0TW9kZSIsImNvbnNvbGUiLCJ3YXJuIiwic3RyaXBlUHJvbWlzZSIsImdldFN0cmlwZSIsInN0cmlwZVNlcnZlciIsImdldFN0cmlwZVNlcnZlciIsImFwaVZlcnNpb24iLCJ0eXBlc2NyaXB0IiwiZ2V0U3RyaXBlQ29uZmlnIiwic2xpY2UiLCJ1bmRlZmluZWQiLCJlbnZpcm9ubWVudCIsInRlc3RTdHJpcGVDb25uZWN0aW9uIiwic3RyaXBlIiwiY3VzdG9tZXJzIiwibGlzdCIsImxpbWl0IiwiZXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/stripe.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/stripe","vendor-chunks/next","vendor-chunks/math-intrinsics","vendor-chunks/es-errors","vendor-chunks/qs","vendor-chunks/call-bind-apply-helpers","vendor-chunks/get-proto","vendor-chunks/@stripe","vendor-chunks/object-inspect","vendor-chunks/has-symbols","vendor-chunks/gopd","vendor-chunks/function-bind","vendor-chunks/side-channel","vendor-chunks/side-channel-weakmap","vendor-chunks/side-channel-map","vendor-chunks/side-channel-list","vendor-chunks/hasown","vendor-chunks/get-intrinsic","vendor-chunks/es-object-atoms","vendor-chunks/es-define-property","vendor-chunks/dunder-proto","vendor-chunks/call-bound"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fhealth%2Froute&page=%2Fapi%2Fhealth%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fhealth%2Froute.ts&appDir=%2FUsers%2Ftomaszgt%2FMytechglasses%2Fmy-tech-glasses%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Ftomaszgt%2FMytechglasses%2Fmy-tech-glasses&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();